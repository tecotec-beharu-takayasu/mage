var util = require('util');
var Service = require('../../service').Service;
var ServiceNode = require('../../node').ServiceNode;
var Messenger = require('../../../processMessenger');
var messenger = new Messenger('serviceDiscovery');

var mage = require('../../../mage');

/**
 *
 * @param {string} name                  The name of the service
 * @param {string} type                  The protocol used (eg: tcp)
 * @param {Object} options               Options
 * @param {string} options.description   Used to override the service name generated by the engine.
 *                                       It needs to be unique on the network!
 * @constructor
 */
function SingleService(name, type, options) {
	this.name = name;
	this.type = type;
	this.options = options;

	// this is the base path we will use to announce this service
	this.baseAnnouncePath = ['/mage', this.name, this.type].join('/');

	this.services = {};
	this.isBrowsing = false;

	var that = this;

	// If the master receive a browse event,
	// it should send all the services the sender of the event
	if (mage.core.processManager.isMaster) {
		messenger.on(this.baseAnnouncePath, function (data, workerId) {
			Object.keys(that.services).forEach(function (key) {
				messenger.send(workerId, 'up', that.services[key]);
			});
		});
	}
}

util.inherits(SingleService, Service);

/**
 * Announce your service to the whole world
 *
 * @param {number}   port       The service port
 * @param {Object}   [metadata] Some private metadata that the service may need for connection
 * @param {Function} [cb]       An optional callback, the first parameter will be an Error if anything wrong happened
 */
SingleService.prototype.announce = function (port, metadata, cb) {
	var node = new ServiceNode('localhost', port, ['127.0.0.1', '::1'], metadata);
	this.services[port] = node;

	// Announce the service to all the workers.
	if (mage.core.processManager.isMaster) {
		messenger.broadcast('up', node);
	}

	// In non-cluster mode, don't announce if the browsing is not enabled.
	if (!this.isBrowsing) {
		if (cb) {
			setImmediate(cb);
		}
		return;
	}

	var that = this;
	// Announce the service to itself
	setImmediate(function () {
		that.emit('up', node);
		if (cb) {
			cb();
		}
	});
};

/**
 * Start service discovery. After that, the service should start browsing the "network" and fire up and down events.
 */
SingleService.prototype.discover = function () {
	this.isBrowsing = true;

	var that = this;

	messenger.on('up', function (service) {
		// If the service has already been announced
		if (that.services[service.port]) {
			return;
		}

		var node = new ServiceNode(
			service.host,
			service.port,
			service.addresses,
			service.data);

		// Register the service
		that.services[service.port] = node;
		that.emit('up', node);
	});

	if (mage.core.processManager.isWorker) {
		// Tell the master to send the updated list of services
		messenger.send('master', this.baseAnnouncePath);
	}

	// Announce to itself services already registered
	Object.keys(this.services).forEach(function (key) {
		this.emit('up', this.services[key]);
	}, this);
};

exports.create = function (name, type, options) {
	return new SingleService(name, type, options);
};
